@page "/lobby" 
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities;
@using Image_Guesser.Hubs;
@inject NavigationManager NavigationManager
<h1>Lobby</h1>

<h5 style="visibility: @hideEnterCodeMsg" > Enter Username</h5>
<input id="userBox" style="visibility:@hideInput" @bind="userInput">
<button class="btn btn-primary" id="submitButton" @onclick="JoinGroup" disabled="@(!CanJoinLobby)" style="visibility:@hideJoin">Submit</button>

<button class="btn btn-primary" id="readyButton" @onclick="setReadyStatus" disabled="@(!IsConnected)" style="visibility:@hideReady">set ready status</button>


<p style="width: 250px; border:3px; border-style:solid; border-color: @color;"> @message</p>
<h2 style="visibility:@hideCode">@gameCode</h2>


<ul id="userList">
    @foreach (String user in users)
    {
        <li>@user</li>
    }
</ul>

@code {

    private HubConnection hubConnection;
    private List<string> users = new List<string>();



    private string userInput = "";
    private string messageInput;
    private string gameCode;


    private String color = "red";
    private String message = "";
    private String guess = "";
    private bool disableJoin = true;
    private bool isInvalidName = true;
    private String hideEnterCodeMsg = "visible";
    private String hideCode = "hidden";
    private String hideJoin = "visible";
    private String hideInput = "visible";
    private String hideEnterNameMsg = "visible";
    private String hideReady = "hidden";
    
    private static Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
        
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("gamecode", out var gamecode);
        gameCode = gamecode;

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}";
            users = ChatHub.getUserList(gameCode);
            StateHasChanged();
        });
        await hubConnection.StartAsync();



    }

    // checks if user is connected and if userName is not blank
    public bool CanJoinLobby =>
    hubConnection.State == HubConnectionState.Connected && !userInput.Equals("");

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    async Task<bool> JoinGroup() =>
     await hubConnection.InvokeAsync<bool>("AddToGroup", gameCode, userInput); 


    async Task ReadyStatus() =>
    await hubConnection.SendAsync("ChangeStatus", gameCode, userInput);

    public static string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length).Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task setReadyStatus()
    {
        //expects chathub to flip the boolean for one of the ready status field
        await ReadyStatus();
    }

    // check if userName has been taken
    private async Task checkValidName()
    {
        checkName();
    }


    public async ValueTask DisposeAsync()
    {
        await hubConnection?.DisposeAsync();

    }

    // want to be able to check if userName has been taken
    public void checkName()
    {
        if(userInput != "")
        {
            isInvalidName = false;
        } else
        {
            isInvalidName = true;

        }

    }

}
