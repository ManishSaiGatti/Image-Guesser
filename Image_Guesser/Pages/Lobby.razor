@page "/lobby" 
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities;
@using Image_Guesser.Hubs;
@using Image_Guesser.Data
@inject NavigationManager NavigationManager

<h1>Lobby</h1>

<h5 style="visibility: @enterNameScreenVisible" > Enter Username</h5>
<input id="userBox" style="visibility:@enterNameScreenVisible" @bind="userInput">
<button class="btn btn-primary" id="submitButton" @onclick="JoinRoom" disabled="@(!CanJoinLobby)" style="visibility:@enterNameScreenVisible">Submit</button>

<button class="btn btn-primary" id="readyButton" @onclick="setReadyStatus" disabled="@(!IsConnected)" style="visibility:@readyButtonVisisble">set ready status</button>


<p style="width: 250px; border:3px; border-style:solid; border-color: @color;"> @message</p>
<h2 style="visibility:@lobbyScreenVisible">@gameCode</h2>


<ul id="userList" style="visibility:@lobbyScreenVisible">
    @foreach (String user in users)
    {
        <li>@user</li>
    }
</ul>

<button class="btn btn-primary" id="startButton" @onclick="SendGameStart" disabled="@(!IsConnected)" style="visibility:@lobbyScreenVisible">Start Game</button>

<div class="gameContainer">
    <div class="gameUserInfo">
        <div style="float:left" class="gameUsername">Username</div>
        <p style="visibility:@gameScreenVisible;width: 250px; border:3px; border-style:solid; border-color: @color; float: left"> @displayCorrect</p>
        <p style="visibility:@gameScreenVisible;width: 150px; border:3px; border-style:solid; border-color: darkgreen; float: left"> Your Score: @score</p>
    </div>
    <div class="gameTimeleft">Timeleft</div>

    <img class="gameImage" src="@game.getCurrentImage().getImageUrl()" alt="@game.getCurrentImage().getCorrectName()" style="visibility:@gameScreenVisible;width:400px;height:340px;filter: blur(@game.getBlurValue()px)">

    <ul class="gameChatMessages" id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>

    <div class="form-group gameChatEntry" style="visibility: @gameScreenVisible">
        <label>
            Message:
            <input style="width:200px" @bind="messageInput" size="50" />    
        </label>
        <button @onclick="Send" disabled="@(!IsConnected)" style="visibility:@gameScreenVisible">Send</button>
    </div>
    

</div>


@code {

    private HubConnection hubConnection;
    private List<string> users = new List<string>();

    private List<string> messages = new List<string>();

    private string userInput = "";
    private string messageInput;
    private string gameCode;


    private String color = "red";
    private String message = "";
    private String guess = "";
    private bool disableJoin = true;
    private bool isInvalidName = true;

    private String enterNameScreenVisible = "visible";
    private String lobbyScreenVisible = "hidden";
    private String gameScreenVisible = "hidden";
    private String scoreScreenVisible = "hidden";

    private String readyButtonVisisble = "hidden";
    private bool allReady;

    private static Random random = new Random();

    private Game game = new Game();
        private string displayCorrect = "Guess";

    private string correctWord;

    private int score = 0;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("gamecode", out var gamecode);
        gameCode = gamecode;

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            if(message.Equals("%start game%"))
            {               
                StartGame();
            }

            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            users = ChatHub.getUsernameList(gameCode);
            StateHasChanged();
        });
        await hubConnection.StartAsync();



    }

    // checks if user is connected and if userName is not blank
    public bool CanJoinLobby =>
    hubConnection.State == HubConnectionState.Connected && !userInput.Equals("");

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    async Task<bool> JoinGroup() =>
     await hubConnection.InvokeAsync<bool>("AddToGroup", gameCode, userInput);

    async Task SendGameStart() =>
    await hubConnection.SendAsync("SendMessage", userInput, "%start game%", gameCode);

    async Task ReadyStatus() =>
    await hubConnection.SendAsync("ChangeStatus", gameCode, userInput);

    async Task Send() =>
    await hubConnection.SendAsync("SendMessage", userInput, messageInput, gameCode);

    private async Task setReadyStatus()
    {
        //expects chathub to flip the boolean for one of the ready status field
        await ReadyStatus();
    }

    // check if userName has been taken
    private async Task checkValidName()
    {
        checkName();
    }


    public async ValueTask DisposeAsync()
    {
        await hubConnection?.DisposeAsync();

    }

    private void JoinRoom()
    {
        enterNameScreenVisible = "hidden";
        lobbyScreenVisible = "visible";
        JoinGroup();
    }

    private async void StartGame()
    {
        lobbyScreenVisible = "hidden";
        gameScreenVisible = "visible";

    }


    // want to be able to check if userName has been taken
    public void checkName()
    {
        if(userInput != "")
        {
            isInvalidName = false;
        } else
        {
            isInvalidName = true;

        }

    }

}
