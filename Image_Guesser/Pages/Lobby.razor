@page "/lobby" 
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities;
@using Image_Guesser.Hubs;
@using Image_Guesser.Data
@inject NavigationManager NavigationManager

<h1>Lobby</h1>

<h5 style="visibility: @enterNameScreenVisible" > Enter Username</h5>
<input id="userBox" style="visibility:@enterNameScreenVisible" @bind="userInput">
<button class="btn btn-primary" id="submitButton" @onclick="JoinRoom" disabled="@(!CanJoinLobby)" style="visibility:@enterNameScreenVisible">Submit</button>

<button class="btn btn-primary" id="readyButton" @onclick="setReadyStatus" disabled="@(!IsConnected)" style="visibility:@readyButtonVisisble">set ready status</button>


<p style="width: 250px; border:3px; border-style:solid; border-color: @color;"> @message</p>
<h2 style="visibility:@lobbyScreenVisible">@gameCode</h2>


<ul id="userList" style="visibility:@lobbyScreenVisible">
    @foreach (String user in users)
    {
        <li>@user</li>
    }
</ul>

<button class="btn btn-primary" id="startButton" @onclick="SendGameStart" disabled="@(!IsConnected)" style="visibility:@lobbyScreenVisible">Start Game</button>

<div class="form-group" style="visibility: @gameScreenVisible">
    <label>
        Message:
        <input @bind="messageInput" size="50" />    
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)" style="visibility:@gameScreenVisible">Send</button>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>



<img src="@game.getCurrentImage().getImageUrl()" alt="@game.getCurrentImage().getCorrectName()" style="visibility:@gameScreenVisible;width:400px;height:340px;filter: blur(@game.getBlurValue()px)">

<p style="visibility:@gameScreenVisible;width: 250px; border:3px; border-style:solid; border-color: @color;"> @displayCorrect</p>
<p style="visibility:@gameScreenVisible;width: 150px; border:3px; border-style:solid; border-color: darkgreen;"> Your Score: @score</p>



@code {

    private HubConnection hubConnection;
    private List<string> users = new List<string>();

    private List<string> messages = new List<string>();

    private string userInput = "";
    private string messageInput;
    private string gameCode;


    private String color = "red";
    private String message = "";
    private String guess = "";
    private bool disableJoin = true;
    private bool isInvalidName = true;

    private String enterNameScreenVisible = "visible";
    private String lobbyScreenVisible = "hidden";
    private String gameScreenVisible = "hidden";
    private String scoreScreenVisible = "hidden";

    private String readyButtonVisisble = "hidden";
    private bool allReady;

    private static Random random = new Random();
    private Game game;



    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("gamecode", out var gamecode);
        gameCode = gamecode;
        game = ref ChatHub.getGameHost(gameCode).hostGame;

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            if(message.Equals("%start game%"))
            {
                StartGame();
            }

            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            users = ChatHub.getUsernameList(gameCode);
            StateHasChanged();
        });
        await hubConnection.StartAsync();



    }

    // checks if user is connected and if userName is not blank
    public bool CanJoinLobby =>
    hubConnection.State == HubConnectionState.Connected && !userInput.Equals("");

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    async Task<bool> JoinGroup() =>
     await hubConnection.InvokeAsync<bool>("AddToGroup", gameCode, userInput);

    async Task SendGameStart() =>
    await hubConnection.SendAsync("SendMessage", userInput, "%start game%", gameCode);

    async Task ReadyStatus() =>
    await hubConnection.SendAsync("ChangeStatus", gameCode, userInput);

    async Task Send() =>
    await hubConnection.SendAsync("SendMessage", userInput, messageInput, gameCode);

    private async Task setReadyStatus()
    {
        //expects chathub to flip the boolean for one of the ready status field
        await ReadyStatus();
    }

    // check if userName has been taken
    private async Task checkValidName()
    {
        checkName();
    }


    public async ValueTask DisposeAsync()
    {
        await hubConnection?.DisposeAsync();

    }

    private void JoinRoom()
    {
        enterNameScreenVisible = "hidden";
        lobbyScreenVisible = "visible";
        JoinGroup();
    }

    private async void StartGame()
    {
        lobbyScreenVisible = "hidden";
        gameScreenVisible = "visible";

    }


    // want to be able to check if userName has been taken
    public void checkName()
    {
        if(userInput != "")
        {
            isInvalidName = false;
        } else
        {
            isInvalidName = true;

        }

    }//game page code stuff



    private int timer = 30;
    private string show = "Welcome to Image Guesser";
    DateTime prev = DateTime.Now;
    DateTime curr = DateTime.Now;
    private bool finishedRound = false;

    private int round = 1;
    private int score = 0;
    private string displayCorrect = "Guess";
    private string guessVar = "";
    private int endPoint;

    void getGuess()
    {
        //game.getCorrectWord().Equals(guessVar)
        if (String.Equals(game.getCorrectWord(), guessVar, StringComparison.OrdinalIgnoreCase) && !finishedRound)
        {
            displayCorrect = "You got the answer correct!";
            score += (timer * 2);
            color = "lightgreen";
            finishedRound = true;
            endPoint = timer;
            guessVar = "";
            show = "Next round starting...";
            Console.WriteLine("inGetGuess");

        }
        else
        {
            displayCorrect = "You got the answer incorrect!";
            color = "darkorange";
        }
    }

    private void startTimer()
    {
        prev = DateTime.Now;
        //this is a thread that calls itself
        var loop = new Timer(new TimerCallback(_ =>
        {
            if (round > 10)
            {
                show = "Thanks for playing! Your score was:" + score;
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                return;
            }
            int blurVal = timer - 10;
            if (blurVal < 0) blurVal = 0;
            game.getCurrentImage().decreaseBlur(blurVal);
            if (timer < 1)
            {
                endPoint = timer;
                show = "the correct word was: " + game.getCorrectWord() + "\nyou have run out of time!";
                if (!finishedRound)
                {
                    finishedRound = true;
                }
            }
            if (finishedRound)
            {

                IncrementCount();
                Console.WriteLine(timer + "\n");
                if (timer - endPoint < -1)
                {
                    finishedRound = false;
                    resetTimer();
                    round++;
                    game.makeNewImage();
                    startNextRound();

                }

            }
            else
            {
                IncrementCount();
                show = "Time left: " + timer;
            }
            // the following line is so
            // Blazor recognizes the state change and refreshes the UI
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 500, 500);
    }
    private void IncrementCount()
    {
        curr = DateTime.Now;

        int deltaTime = curr.Second - prev.Second;
        //edge case for when time wraps around 60 to 0
        if (Math.Abs(deltaTime) >= 59) deltaTime = Math.Abs(deltaTime) - 58;
        prev = curr;

        timer -= deltaTime;



    }

    private void resetTimer()
    {
        timer = 30;
    }

    private void startNextRound()
    {



        guessVar = "";


    }
}
