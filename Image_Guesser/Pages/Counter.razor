@page "/counter"
@using Image_Guesser.Data
@using System.Threading;
@using System;



<h1>Image Guesser</h1>

<img src="@game.getCurrentImage().getImageUrl()" alt="@game.getCurrentImage().getCorrectName()" style="width:400px;height:340px;filter: blur(@game.getBlurValue()px)">

<p>Current guess: @guessVar</p>
<p style="width: 250px; border:3px; border-style:solid; border-color: @color;"> @displayCorrect</p>
<button class="btn btn-primary" id="guessText" @onclick="getGuess">Submit</button>
<input id="guess" @bind="guessVar">
<p style="width: 150px; border:3px; border-style:solid; border-color: darkgreen;"> Your Score: @score</p>

<p>@show</p>

<p>@closeMessage</p>

<button class="btn btn-primary" @onclick="startTimer" @onload="resetTimer">start game!</button>

<button class="btn btn-primary" @onclick="startNextRound" @onload="resetTimer">Next Round</button>

@removeNum(game.getCurrentImage().getCorrectName())
<!--<p>@diffChar</p>

<p>@showCorrect</p>
<p>@showGuess</p>
    -->

@code
{   


    private string color = "blue";


    private int timer = 30;
    private string show = "Welcome to Image Guesser";
    DateTime prev = DateTime.Now;
    DateTime curr = DateTime.Now;
    private bool finishedRound = false;

    private int round = 1;
    private int score = 0;
    private string displayCorrect = "Guess";
    private string guessVar = "";
    private string closeMessage = "";
    private int endPoint;
    private Game game = new Game();
    //private int diffChar = 0;

    private string showCorrect = "";
    private string showGuess = "";


        private String removeNum(String word)
    {
        word = game.getCurrentImage().getCorrectName();
        char last = word[word.Length-1];
        if (Char.IsDigit(last))
        {
            return word.Substring(0, word.Length - 1);
        }
        return word;
    }



    void getGuess()
    {
        //game.getCorrectWord().Equals(guessVar)
        string correct = game.getCurrentImage().getCorrectName();
        correct = removeNum(correct);
        if (String.Equals(correct, guessVar, StringComparison.OrdinalIgnoreCase) && !finishedRound)
        {
            displayCorrect = "You got the answer correct!";
            score += (timer * 2);
            color = "lightgreen";
            finishedRound = true;
            endPoint = timer;
            guessVar = "";
            show = "Next round starting...";
            Console.WriteLine("inGetGuess");

        }
        else
        {
            displayCorrect = "You got the answer incorrect!";
            color = "darkorange";
        }

        List<char> splitCorrect = new List<char>();
        List<char> splitGuess = new List<char>();

        int longest = 0;
        closeMessage = "";
        if (correct.Length > guessVar.Length)
        {
            longest = correct.Length;
        } else
        {
            longest = guessVar.Length;
        }
        int diffChar = 0;

        for (int i = 0; i < guessVar.Length; i++)
        {
            splitGuess.Add(guessVar[i]);
        }
        //splitGuess.Sort();
        //List<char> newSplitGuess = splitGuess.Distinct().ToList();
        showGuess = String.Join(",", splitGuess);


        for (int i = 0; i < correct.Length; i++)
        {
            splitCorrect.Add(correct[i]);
        }
        //splitCorrect.Sort();
        //List<char> newSplitCorrect = splitCorrect.Distinct().ToList();

        showCorrect = String.Join(",", splitCorrect);

        for (int i = 0; i < splitCorrect.Count() && i < splitGuess.Count(); i++)
        {
            if (!splitGuess.Contains(splitCorrect.ElementAt(i)))
            {

                diffChar++;
            }

        }

        if (guessVar.Length <= correct.Length + 1 && guessVar.Length >= correct.Length - 1)
        {


            if ((diffChar <= 2))
            {
                closeMessage = "You are close!";
            }

        }
        else
        {
            closeMessage = "";
        }




    }

    private void startTimer()
    {
        prev = DateTime.Now;
        //this is a thread that calls itself
        var loop = new Timer(new TimerCallback(_ =>
        {
            if (round > 10)
            {
                show = "Thanks for playing! Your score was:" + score;
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                return;
            }
            int blurVal = timer - 10;
            if (blurVal < 0) blurVal = 0;
            game.getCurrentImage().decreaseBlur(blurVal);
            if (timer < 1)
            {
                endPoint = timer;
                show = "the correct word was: " + removeNum(game.getCorrectWord()) + "\nyou have run out of time!";
                if (!finishedRound)
                {
                    finishedRound = true;
                }
            }
            if (finishedRound)
            {


                IncrementCount();
                Console.WriteLine(timer + "\n");
                if (timer - endPoint < -1)
                {
                    finishedRound = false;
                    resetTimer();
                    round++;
                    game.makeNewImage();
                    startNextRound();

                }

            }
            else
            {
                IncrementCount();
                show = "Time left: " + timer;
            }
            // the following line is so
            // Blazor recognizes the state change and refreshes the UI
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 500, 500);
    }
    private void IncrementCount()
    {
        curr = DateTime.Now;

        int deltaTime = curr.Second - prev.Second;
        //edge case for when time wraps around 60 to 0
        if (Math.Abs(deltaTime) >= 59) deltaTime = Math.Abs(deltaTime) - 58;
        prev = curr;

        timer -= deltaTime;



    }

    private void resetTimer()
    {
        timer = 30;
    }

    private void startNextRound()
    {



        guessVar = "";


    }
}