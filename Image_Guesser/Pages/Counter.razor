@page "/"
@using Image_Guesser.Data
@using System.Threading;



<h1>Image Guesser</h1>

<img src="@game.getCurrentImage().getImageUrl()" alt="@game.getCurrentImage().getCorrectName()" style="width:400px;height:340px;filter: blur(@game.getBlurValue()px)">

    <p>Current guess: @guessVar</p>
    <p style="width: 250px; border:3px; border-style:solid; border-color: @color;"> @displayCorrect</p>
    <button class="btn btn-primary" id="guessText" @onclick="getGuess">Submit</button>
    <input id="guess" @bind="guessVar">
    <p style="width: 150px; border:3px; border-style:solid; border-color: darkgreen;"> Your Score: @score</p>

    <p>@show</p>

    <button class="btn btn-primary" @onclick="startTimer" @onload="resetTimer">start game!</button>

    <button class="btn btn-primary" @onclick="startNextRound" @onload="resetTimer">Next Round</button>

</div>

<table style="opacity:@tableVis; padding-left:300px">

    @{
        int playerCount = 5;
        for (int i = 0; i < playerCount; i++)
        {
            String playerName = "player" + i;
            <tr style="border: 2px solid">
                <th style="border: 2px solid">@playerName</th>
                <th style="border: 2px solid">@score</th>
            </tr>
        }
    }
    <!--
    <tr style="border: 2px solid">
        <th style="border: 2px solid">Header 1</th>
        <th style="border: 2px solid">Header 2</th>
    </tr>

    <tr style="border: 2px solid">
        <td style="border: 2px solid">Cell 1,1</td>
        <td style="border: 2px solid">Cell 1,2</td>
    </tr>

    <tr style="border: 2px solid">
        <td style="border: 2px solid">Cell 2,1</td>
        <td style="border: 2px solid">Cell 2,2</td>
    </tr>
    -->
</table>

@code
{   


    private string color = "blue";


    private int timer = 30;
    private string show = "Welcome to Image Guesser";
    DateTime prev = DateTime.Now;
    DateTime curr = DateTime.Now;
    private bool finishedRound = false;

    private int round = 1;
    private int score = 0;
    private string displayCorrect = "Guess";
    private string guessVar = "";
    private string correctWord;
    private int endPoint;
    private Game game = new Game();

    double visibility = 1;
    double tableVis = 0;

    void getGuess()
    {
        //game.getCorrectWord().Equals(guessVar)
        if (String.Equals(game.getCorrectWord(), guessVar, StringComparison.OrdinalIgnoreCase)&&!finishedRound)
        {
            displayCorrect = "You got the answer correct!";
            score += (timer * 2);
            color = "lightgreen";
            finishedRound = true;
            endPoint = timer;
            guessVar = "";
            show = "Next round starting...";
            Console.WriteLine("inGetGuess");
        }
        else
        {
            displayCorrect = "You got the answer incorrect!";
            color = "darkorange";
        }
    }

    private void startTimer()
    {
        prev = DateTime.Now;
        //this is a thread that calls itself
        var loop = new Timer(new TimerCallback(_ =>
        {
            if (round > 10)
            {
                show = "Thanks for playing! Your score was:" + score;
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                return;
            }
            int blurVal = timer - 10;
            if (blurVal < 0) blurVal = 0;
            game.getCurrentImage().decreaseBlur(blurVal);
            if (timer < 1)
            {
                endPoint = timer;
                show = "the correct word was: " + game.getCorrectWord()+ "\nyou have run out of time!";
                if (!finishedRound)
                {
                    finishedRound = true;
                }
            }
            if (finishedRound)
            {
                IncrementCount();
                Console.WriteLine(timer + "\n");
                if (timer-endPoint < -1)
                {
                    finishedRound = false;
                    resetTimer();

                    visibility = .2;
                    tableVis = 1;
                    
                    System.Threading.Thread.Sleep(3000);
                    visibility = 1;
                    tableVis = 0;

                    resetTimer();
                    round++;
                    game.makeNewImage();
                    startNextRound();
                }
            }
            else
            {
                IncrementCount();
                show = "Time left: " + timer;
            }
            // the following line is so
            // Blazor recognizes the state change and refreshes the UI
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 500, 500);
    }
    private void IncrementCount()
    {
        curr = DateTime.Now;

        int deltaTime = curr.Second - prev.Second;
        //edge case for when time wraps around 60 to 0
        if (Math.Abs(deltaTime) >= 59) deltaTime = Math.Abs(deltaTime) - 58;
        prev = curr;

        timer -= deltaTime;
        


    }

    private void resetTimer()
    {
        timer = 30;
    }

    private void startNextRound()
    {
        guessVar = "";
    }
}