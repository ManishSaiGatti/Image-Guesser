
@page "/blurTest"
@using Image_Guesser.Data

<link rel="stylesheet" type="text/css" href="StyleSheet.css" />

<h1>Image Guesser</h1>
<img class="blurredImage" src="@game.getCurrentImage().getImageUrl()" alt="@game.getCorrectWord()" style="width:200px;height:200px; filter:blur(@game.getBlurValue()px);">
<p>Current guess: @guessVar</p>
<p>@displayCorrect</p>
<button class="btn btn-primary" id="guessText" @onclick="getGuess">Submit</button>
<input id="guess" @bind="guessVar">
<p style="width: 150px; border:3px; border-style:solid; border-color:#00ff00;"> Your Score: @score</p>

<p>@show</p>

<button class="btn btn-primary" @onclick="startTimer" @onload="resetTimer">Click me</button>

@code
{
    private int timer = 10;
    private string show = "Time left: 10";
    DateTime prev = DateTime.Now;
    DateTime curr = DateTime.Now;

    private int score = 0;
    private string displayCorrect = "false";
    private string guessVar = "";
    private string correctWord;
    private Game game = new Game();

    void getGuess()
    {
        //game.getCorrectWord().Equals(guessVar)
        if (String.Equals(game.getCorrectWord(), guessVar, StringComparison.OrdinalIgnoreCase))
        {
            displayCorrect = "You got the answer correct!";
            score += 100;
        }
        else
        {
            displayCorrect = "You got the answer incorrect!";
        }
    }

    private void startTimer()
    {
        prev = DateTime.Now;
        //this is a thread that calls itself
        var loop = new Timer(new TimerCallback(_ =>
        {
            IncrementCount();
            game.getCurrentImage().decreaseBlur(timer);
            if (timer < 1)
            {
                show = "you have run out of time!";

            }
            else
            {
                show = "Time left: " + timer;
            }
        // Note that the following line is necessary because otherwise
        // Blazor would not recognize the state change and not refresh the UI
        InvokeAsync(() =>
            {

                StateHasChanged();
            });
        }), null, 500, 500);
    }
    private void IncrementCount()
    {
        curr = DateTime.Now;

        int deltaTime = curr.Second - prev.Second;
        //edge case for when time wraps around 60 to 0
        if (Math.Abs(deltaTime) >= 60) deltaTime = Math.Abs(deltaTime) - 60;
        prev = curr;

        timer -= deltaTime;
    }

    private void resetTimer()
    {
        timer = 50;
    }
}