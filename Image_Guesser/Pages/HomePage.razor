@page "/Lobby"
@using Microsoft.AspNetCore.SignalR.Client
@using Image_Guesser.Hubs;
@inject NavigationManager NavigationManager
<h1>Lobby</h1>
<h5>Enter code to join a room</h5>

<button class="btn btn-primary" id="guessText" @onclick="CreateRoom" disabled="@(!IsConnected)" style="visibility:@hideCreate">Create Room</button>
<button class="btn btn-primary" id="guessText" @onclick="JoinRoom" disabled="@(!IsConnected)" style="visibility:@hideJoin">Join Room</button>

<button class="btn btn-primary" id="guessText" @onclick="JoinRoom" style="visibility:@hideInput">Check For Room</button>
<input id="groupBox" style="visibility:@hideInput" @bind="groupInput">
<button class="btn btn-primary" disabled=@disableJoin style=" visibility:@hideInput" id="guessText" onclick="location.href='/counter'">Join Room</button>
<input id="userBox" style="visibility:@hideInput" @bind="userInput">
<button class="btn btn-primary" id="readyButton" @onclick="setReadyStatus" disabled="@(!IsConnected)" style="visibility:@hideReady">set ready status</button>

<p style="width: 250px; border:3px; border-style:solid; border-color: @color;"> @message</p>
<h2 style="visibility:@hideCode">@codes</h2>
<button class="btn btn-primary" id="guessText" @onclick="Back" style="visibility:@hideBack">Back</button>

<ul id="userList">
    @foreach (var user in users)
    {
        <li>@user</li>
    }
</ul>

@code {

    private HubConnection hubConnection;
    private List<string> users = new List<string>();



    private string userInput;
    private string messageInput;
    private string groupInput;


    private String color = "red";
    private String message = "";
    private String guess = "";
    private bool disableJoin = true;
    private String hideCreate = "visible";
    private String hideCode = "hidden";
    private String hideJoin = "visible";
    private String hideInput = "visible";
    private String hideBack = "hidden";
    private String hideMess = "visible";
    private String hideReady = "hidden";
    public string codes = RandomString(5);
    private static Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}";
            users = ChatHub.getUserList(groupInput);
            StateHasChanged();
        });
        await hubConnection.StartAsync();



    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    async Task CreateGroup() =>
    await hubConnection.SendAsync("AddToGroup", groupInput, userInput);

    async Task JoinGroup() =>
    await hubConnection.SendAsync("AddToGroup", groupInput, userInput); // how do i make this return a boolean??? cause this is where the method is being called

    async Task ReadyStatus() =>
    await hubConnection.SendAsync("changeStatus", userInput);

    public static string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length).Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async void CreateRoom()
    {
        hideCode = "visible";
        hideInput = "hidden";
        hideJoin = "hidden";
        hideBack = "hidden";
        hideCreate = "hidden";
        hideReady = "visible";

        groupInput = codes;

        await CreateGroup();
    }
    private async Task JoinRoom()
    {
        hideCode = "visible";
        hideInput = "hidden";
        hideCreate = "hidden";
        hideBack = "hidden";
        hideJoin = "hidden";
        hideReady = "visible";
        codes = groupInput;

        await JoinGroup();

        // need a way to detect if the join group has been succesful
        // if join has been succesful, do above
        // else, display a message and stay on the same screen

    }
    private async Task setReadyStatus()
    {
        //expects chathub to flip the boolean for one of the ready status field
        await ReadyStatus();
    }
    private void Back()
    {
        hideCode = "hidden";
        hideInput = "visible";
        hideJoin = "visible";
        hideBack = "hidden";
        hideCreate = "visible";
        hideReady = "hidden";
        message = "";
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection?.DisposeAsync();

    }
}
