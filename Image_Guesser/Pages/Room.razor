@page "/lobby"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities;
@using Image_Guesser.Hubs;
@using Image_Guesser.Data
@inject NavigationManager NavigationManager


<div class="gamePage">
    <div class="lobbyContainer" style="display:@lobbyDisplay; margin:0 auto; text-align:center">
        <h1>Room @gameCode</h1>
        <h5 style="display: @enterNameScreenVisible"> Enter Username</h5>
        <input id="userBox" style="display:@enterNameScreenVisible; margin: auto" @bind="userInput">
        <button class="btn btn-primary" id="submitButton" @onclick="JoinRoom" disabled="@(!CanJoinLobby)" style="display:@enterNameScreenVisible; margin: auto">Submit</button>

        <button class="btn btn-primary" id="readyButton" @onclick="setReadyStatus" disabled="@(!IsConnected)" style="visibility:@readyButtonVisisble">set ready status</button>


        <h2 style="display: @lobbyScreenVisible"> Players </h2>
        <h2 style="display: @lobbyScreenVisible"> -------------------- </h2>

        <ul id="userList" style="visibility:@lobbyScreenVisible; list-style: none;margin-left: -40px;">
            @foreach (String user in users)
            {
                <li>@user</li>
            }
        </ul>

        <button class="btn btn-primary" id="startButton" @onclick="SendGameStart" disabled="@(!IsConnected)" style="display:@lobbyScreenVisible; margin:auto">Start Game</button>
    </div>
    <div class="gameContainer">
        <div class="gameUserInfo">
            <div style="float:left; visibility:@gameScreenVisible" class="gameUsername">Username</div>
            <p style="visibility:@gameScreenVisible;width: 250px; border:3px; border-style:solid; border-color: @color;"> @displayGameMessage</p>
            <p style="visibility:@gameScreenVisible;width: 150px; border:3px; border-style:solid; border-color: darkgreen; float: left"> Your Score: @score</p>
        </div>
        <p style="visibility:@gameScreenVisible;width: 150px; border:3px; border-style:solid; border-color: darkgreen;"> @showTimer</p>

        <img class="gameImage" src="@game.getCurrentImage().getImageUrl()" alt="@game.getCurrentImage().getCorrectName()" style="visibility:@gameScreenVisible;width:400px;height:340px;filter: blur(@game.getBlurValue()px)">

        <ul class="gameChatMessages" style="visibility: @gameScreenVisible" id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>

        <div class="form-group gameChatEntry" style="visibility: @gameScreenVisible">
            <label>
                Message:
                <input style="width:200px" @bind="messageInput" size="50" />
            </label>
            <button @onclick="sendGameMessage" disabled="@(!IsConnected)" style="visibility:@gameScreenVisible">Send</button>
        </div>


    </div>
</div>

<table style="opacity:@tableVis;">
    @{
        int playerCount = 5;
        for (int i = 0; i < playerCount; i++)
        {
            String playerName = "player" + i;
            <tr style="border: 2px solid">
                <th style="border: 2px solid">@playerName</th>
                <th style="border: 2px solid">@score</th>
            </tr>
        }
    }
</table>

@code {

    private HubConnection hubConnection;
    private List<string> users = new List<string>();

    private List<string> messages = new List<string>();

    private string userInput = "";
    private string messageInput;
    private string gameCode;

    private String color = "red";
    private String guess = "";
    private bool disableJoin = true;
    private bool isInvalidName = true;

    private String enterNameScreenVisible = "block";
    private String lobbyScreenVisible = "none";

    private String gameScreenVisible = "hidden";
    private String scoreScreenVisible = "hidden";
    private String lobbyDisplay = "block";

    private String readyButtonVisisble = "hidden";
    private bool allReady;

    private static Random random = new Random();
    private Game game = new Game();

    double visibility = 1;
    double tableVis = 1;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("gamecode", out var gamecode);
        gameCode = gamecode;

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            if (message.Equals("%start game%"))
            {
                StartGame();
            }
            else if (message.Equals("new user ready"))
            {
                setNewImage();
            }
            else
            {
                var encodedMsg = $"{user}: {message}";
                messages.Add(encodedMsg);
                users = ChatHub.getUsernameList(gameCode);
                StateHasChanged();
            }

        });


        hubConnection.On<string, int>("ReceiveScore", (user, score) =>
        {
            var receivedScore = score;
            StateHasChanged();

        });
        await hubConnection.StartAsync();
    }

    // checks if user is connected and if userName is not blank
    public bool CanJoinLobby =>
    hubConnection.State == HubConnectionState.Connected && !userInput.Equals("");

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    async Task<bool> JoinGroup() =>
     await hubConnection.InvokeAsync<bool>("AddToGroup", gameCode, userInput);

    async Task SendGameStart() =>
    await hubConnection.SendAsync("SendMessage", userInput, "%start game%", gameCode);

    async Task SendScore() =>
    await hubConnection.SendAsync("SendScore", userInput, score, gameCode);

    async Task SendNewUser() =>
    await hubConnection.SendAsync("SendMessage", userInput, "new user ready", gameCode);

    async Task ReadyStatusTrue() =>
    await hubConnection.SendAsync("ChangeStatusTrue", gameCode, userInput);

    async Task ReadyStatusFalse() =>
    await hubConnection.SendAsync("ChangeStatusFalse", gameCode, userInput);

    async Task Send() =>
    await hubConnection.SendAsync("SendMessage", userInput, messageInput, gameCode);

    async Task GetNewImage() =>
        await hubConnection.SendAsync("GetNewImage", gameCode);

    async Task SetNewImage() =>
        await hubConnection.SendAsync("SetNewImage", gameCode);

    async Task<bool> allUsersReady() =>
     await hubConnection.InvokeAsync<bool>("allUsersReady", gameCode);

    private async Task<bool> usersReady()
    {
        return await allUsersReady();
    }
    private async Task setReadyStatus()
    {
        //expects chathub to flip the boolean for one of the ready status field
        await ReadyStatusTrue();
    }

    // check if userName has been taken
    private async Task checkValidName()
    {
        checkName();
    }


    public async ValueTask DisposeAsync()
    {
        await hubConnection?.DisposeAsync();

    }

    private async void sendGameMessage()
    {
        await Send();
        getGuess();
    }

    private async void setNewImage()
    {
        if (await allUsersReady())
        {
            await SetNewImage();
            allReady = true;
        }
    }
    private async void JoinRoom()
    {
        enterNameScreenVisible = "none";
        lobbyScreenVisible = "block";
        lobbyDisplay = "block";
        await JoinGroup();

    }

    private async void StartGame()
    {
        lobbyScreenVisible = "hidden";
        gameScreenVisible = "visible";
        lobbyDisplay = "none";
        game = ChatHub.getGameHost(gameCode);
        startTimer();

    }


    // want to be able to check if userName has been taken
    public void checkName()
    {
        if (userInput != "")
        {
            isInvalidName = false;
        }
        else
        {
            isInvalidName = true;

        }

    }//game page code stuff



    private int timer = 30;
    private string showTimer = "Welcome to Image Guesser";
    DateTime prev = DateTime.Now;
    DateTime curr = DateTime.Now;
    private bool finishedRound = false;

    private int round = 1;
    private int score = 0;
    private string displayGameMessage = "Guess";
    private int endPoint;

    void getGuess()
    {
        //game.getCorrectWord().Equals(messageInput)
        if (String.Equals(game.getCorrectWord(), messageInput, StringComparison.OrdinalIgnoreCase) && !finishedRound)
        {
            displayGameMessage = "You got the answer correct!";
            score += (timer * 2);
            color = "lightgreen";
            finishedRound = true;
            endPoint = timer;
            messageInput = "";
            showTimer = "waiting for other players";
            Console.WriteLine("inGetGuess");

        }
        else
        {
            displayGameMessage = "You got the answer incorrect!";
            color = "darkorange";
        }
    }

    private void startTimer()
    {
        prev = DateTime.Now;
        //this is a thread that calls itself
        var loop = new Timer(new TimerCallback(async _ =>
        {
            if (round > 10)
            {
                showTimer = "Thanks for playing! Your score was:" + score;
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                return;
            }
            int blurVal = timer - 10;
            if (blurVal < 0) blurVal = 0;
            IncrementCount();
            game.getCurrentImage().decreaseBlur(blurVal);
            if (timer < 1)
            {
                endPoint = timer;
                showTimer = "the correct word was: " + game.getCorrectWord() + "\nyou have run out of time!";
                if (!finishedRound)
                {
                    finishedRound = true;
                }
            }
            if (finishedRound&&!allReady)
            {
                await ReadyStatusTrue();
                await SendNewUser();
                Console.WriteLine("bruh \n");

            }


            else
            {
                showTimer = "Time left: " + timer;
            }
            if (allReady)
            {
                Console.WriteLine("bro?? \n");
                finishedRound = false;
                /*resetTimer();

                visibility = .2;
                tableVis = 1;

                System.Threading.Thread.Sleep(3000);
                visibility = 1;
                tableVis = 0;*/

                resetTimer();
                round++;
                game = ChatHub.getGameHost(gameCode);
                startNextRound();


                allReady = false;
                ReadyStatusFalse();
            }
            // the following line is so
            // Blazor recognizes the state change and refreshes the UI
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 0, 100);
    }
    private void IncrementCount()
    {
        curr = DateTime.Now;

        int deltaTime = curr.Second - prev.Second;
        //edge case for when time wraps around 60 to 0
        if (Math.Abs(deltaTime) >= 59) deltaTime = Math.Abs(deltaTime) - 58;
        prev = curr;

        timer -= deltaTime;
        Console.WriteLine(timer);


    }

    private void resetTimer()
    {
        timer = 30;
    }

    private void startNextRound()
    {



        messageInput = "";


    }
}
