@page "/counter2"
@using Image_Guesser.Data

<h1>Image Guesser</h1>

<!--
<img src="@game.getCurrentImage().getImageUrl()" alt="@game.getCorrectWord()" style="width:50px;height:60px;filter: blur(@game.getBlurValue()px)">
-->

@{
    for (int i = 0; i < game.getNumStrips(); i++)
    {
        <img src="@stripOrder[i]" style="width:5px;height:300px;padding:0px;margin:0px;float:left" />
    }
}

<div style="display:inline-grid">
    <p>Current guess: @guessVar</p>
    <p>@displayCorrect</p>
    <button class="btn btn-primary" id="guessText" @onclick="getGuess">Submit</button>
    <input id="guess" @bind="guessVar">
    <p style="width: 150px; border:3px; border-style:solid; border-color:#00ff00;"> Your Score: @score</p>

    <p>@show</p>

    <button class="btn btn-primary" @onclick="startTimer" @onload="resetTimer">start game!</button>

    <button class="btn btn-primary" @onclick="startNextRound" @onload="resetTimer">Next Round</button>

    <!--
    <button class="btn btn-primary" @onclick="startTimer" @onload="resetTimer">Click me</button>
    -->

</div>

@code
{
    private string color = "blue";


    private int timer = 30;
    private string show = "Welcome to Image Guesser";
    DateTime prev = DateTime.Now;
    DateTime curr = DateTime.Now;
    private bool finishedRound = false;

    private int round = 1;
    private int score = 0;
    private string displayCorrect = "Guess";
    private string guessVar = "";
    private string correctWord;
    private int endPoint;
    private Game game = new Game();

    private int numScrambles = -1;
    private String[] stripOrder;

    //C:\Users\s-mgatti\Source\Repos\choice-project-image-guesser\Image_Guesser\Data\Strips\VertStrip_1.png

    void getGuess()
    {
        if (String.Equals(game.getCorrectWord(), guessVar, StringComparison.OrdinalIgnoreCase) && !finishedRound)
        {
            displayCorrect = "You got the answer correct!";
            score += (timer * 2);
            color = "lightgreen";
            finishedRound = true;
            endPoint = timer;
            guessVar = "";
            show = "Next round starting...";
            Console.WriteLine("inGetGuess");

        }
        else
        {
            displayCorrect = "You got the answer incorrect!";
            color = "darkorange";
        }
    }

    Task setArray()
    {
        //String[] temp = game.getVertStrips();
        stripOrder = game.getVertStrips();
        Random rand = new Random();

        int n = stripOrder.Length;
        while (n > 1)
        {
            n--;
            int k = rand.Next(n + 1);
            String value = stripOrder[k];
            stripOrder[k] = stripOrder[n];
            stripOrder[n] = value;
        }

        Console.WriteLine(stripOrder.ToString());

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await setArray();
    }

    private void startTimer()
    {
        prev = DateTime.Now;
        //this is a thread that calls itself
        var loop = new Timer(new TimerCallback(_ =>
        {
            if (round > 10)
            {
                show = "Thanks for playing! Your score was:" + score;
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                return;
            }
            int blurVal = timer - 10;
            if (blurVal < 0) blurVal = 0;
            game.getCurrentImage().decreaseBlur(blurVal);
            if (timer < 1)
            {
                endPoint = timer;
                show = "the correct word was: " + game.getCorrectWord() + "\nyou have run out of time!";
                if (!finishedRound)
                {
                    finishedRound = true;
                }
            }
            if (finishedRound)
            {


                IncrementCount();
                Console.WriteLine(timer + "\n");
                if (timer - endPoint < -1)
                {
                    finishedRound = false;
                    resetTimer();
                    round++;
                    game.makeNewImage();
                    stripOrder = game.getVertStrips();
                    startNextRound();

                }

            }
            else
            {
                IncrementCount();
                show = "Time left: " + timer;
            }
            // the following line is so
            // Blazor recognizes the state change and refreshes the UI
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 500, 500);
    }

    private void IncrementCount()
    {
        curr = DateTime.Now;

        int deltaTime = curr.Second - prev.Second;
        //edge case for when time wraps around 60 to 0
        if (Math.Abs(deltaTime) >= 59) deltaTime = Math.Abs(deltaTime) - 58;
        prev = curr;

        timer -= deltaTime;

        //Console.WriteLine(stripOrder.ToString());



        numScrambles += 1;

        bool run = true;
        int numRuns = 0;
        for (int i = 0; i < 10; i++)
        {
            while (run && numRuns < game.getNumStrips())
            {
                // 18 and 19
                numRuns++;
                Random rand = new Random();
                int randIndex = rand.Next(game.getNumStrips());
                String pathUrl = stripOrder[randIndex];
                // Int32.TryParse(pathUrl.Substring(18, 2), out null);
                int correctIndex;
                if (Int32.TryParse(pathUrl.Substring(17, 2), out correctIndex))
                {

                }
                else
                {
                    correctIndex = Int32.Parse(Char.ToString(pathUrl[pathUrl.Length - 5]));
                }

                if (randIndex != correctIndex)
                {
                    stripOrder[randIndex] = stripOrder[correctIndex];
                    stripOrder[correctIndex] = pathUrl;
                    numRuns = 11;
                    run = false;
                }

            }
        }
    }

    private void resetTimer()
    {
        timer = 50;
    }

    private void startNextRound()
    {
        guessVar = "";
        //stripOrder = game.getVertStrips();
    }
}